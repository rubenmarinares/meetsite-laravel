Documentaci√≥n:


Base proyecto: https://www.youtube.com/watch?v=f9FKZE4C3vE

Instalamos Fortify(paquete para la gesti√≥n de usuarios)
    https://www.youtube.com/watch?v=5c9iJ3hWpk4

Instalamos Spatie(gesti√≥n de roles y permisos)

SPATIE (para permisos y roles) https://www.youtube.com/watch?v=nKtJEezp7WI




CUANDO creamos el modelo tenemos que definier para que se va a utilizar y en la tabla de exportaci√≥n
tenemos que a√±adrile los campo que queremos que tengan
php artisan make:model


{{ dd($menuitems) }}
@php dd($menuitems); @endphp



Quiero crear un array de academias en session cuando el usuario se loguee por lo que voy a generar un controller:
php artisan make:controller Auth/AuthenticatedSessionController

Despu√©s implementamos el m√©todo store dentro del controller


Y sobreescribimos la direcci√≥n de login de fortify
use App\Http\Controllers\Auth\AuthenticatedSessionController;

Route::post('/login', [AuthenticatedSessionController::class, 'store'])->middleware(['guest'])->name('login');


php artisan db:seed

Generar tabla pivot:
php artisan make:migration create_role_user_table



PREPARAR TRAIT EN LARAVEL PARA REUTILIZAR C√ìDIGO

<?php

namespace App\Traits;

use App\Models\Academia;
use App\Models\Profesor;
use Illuminate\Support\Facades\Auth;

trait PreparaFormularioProfesor
{
    public function prepararFormularioProfesor(array $data = []): array
    {
        $user = Auth::user();

        if ($user->hasRole('super-admin')) {
            $academias = Academia::query()->orderByRaw('academia')->get();
            $menu = true;
        } else {
            $academias = Academia::query()
                ->whereHas('users', function ($query) use ($user) {
                    $query->where('users.id', $user->id);
                })
                ->orderByRaw('academia')->get();
            $menu = false;
        }

        return [
            'profesor' => new Profesor(),
            'submitButtonText' => 'Crear Profesor',
            'actionUrl' => route('profesores.store'),
            'method' => 'POST',
            'h2Label' => 'Crear Profesor',
            'academiasSeleccionadas' => $data['academias'] ?? [],
            'academias' => $academias,
            'menu' => $menu,
            'metaUrlForm' => route('profesores.create'),
            'data' => $data,
        ];
    }
}
üß© Paso 2: Usar el Trait en el Controller
php
Copiar
Editar
use App\Traits\PreparaFormularioProfesor;

class ProfesorController extends Controller
{
    use PreparaFormularioProfesor;

    public function create(): View
    {
        $vars = $this->prepararFormularioProfesor();

        return view('profesores.partials.form', $vars);
    }
}
üß© Paso 3: Usar el Trait en ProfesorRequest
php
Copiar
Editar
use App\Traits\PreparaFormularioProfesor;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\ViewErrorBag;

class ProfesorRequest extends FormRequest
{
    use PreparaFormularioProfesor;

    public function failedValidation(Validator $validator)
    {
        $viewErrors = new ViewErrorBag();
        $viewErrors->put('default', $validator->errors());

        $formVars = $this->prepararFormularioProfesor($this->all());

        $view = view('profesores.partials.form', array_merge(
            $formVars,
            ['errors' => $viewErrors]
        ))->render();

        throw new HttpResponseException(
            response($view, 422)
        );
    }
}

//TODO
-Setear la academia en la que estamos cuando entramos en ella--> LISTO
-Configurar la edici√≥n de la academia cuando estamos en el panel principal(sidebar) -->LISTO
-Filtrar a los alumnos de los clientes linkados por academia seleccionada -->LISTO
-Creaci√≥n del modelo grupos (ESTAMOS EN ELLO)--> A√ëADIR ALUMNOS/ PROFESORES / ASIGNATURAS
-FILTRAR COMBO ACADEMIAS DE LOS ELEMENTOS CON EL VALOR SELECCIONADO en SESSION
-Generar calendario
-Eliminar en el listado gen√©rico de clientes los duplicaod de academias
-DATOS FISCALES DE ACADEMIAS



-Restauraci√≥n de password --> LISTO, Faltan detalles de implementaci√≥n como mensajes en los distintos steps donde se solicita
-Asistencia alumnos.
    Desde la pesta√±a de alumnos podremos guardar la asistencia de un alumno a sus grupos:
        -Un grupo puede tener varios alumnos
        -Un grupo tiene un horario
        -Un grupo tiene un profesor
        -Un grupo puede estar en varias aulas, dependiendo del d√≠a.

    Desde la pesta√±a de alumnos veremos los grupos en los que est√° el usuario y podremos abrir el enlace asistecia grupo
        Dentro de esta p√°gina aparecer√° el d√≠a y hora en los que el alumno tiene clase con los checks para marcar la asistencia
        Check para marcar asistencia y un input de observaciones

    Esta pesta√±a la podremos generar de manera din√°mica con buscadores:
        desplegable de alumnos/ desplegable de grupos

    Asistencia abrir√° nueva pesta√±a--> Creamos controlador Asistencia 

Vista de  PARA MARCAR LA ASISTENCIA DE USUARIOS A GRUPOS:

GRUPO 1
| Alumno     | 01/10 | 03/10 | 08/10 | 10/10 | ... |
| ---------- | ----- | ----- | ----- | ----- | --- |
| Juan P√©rez | ‚úÖ     | ‚ùå     | ‚úÖ     | ‚úÖ     | ... |
| Ana L√≥pez  | ‚úÖ     | ‚úÖ     | ‚ùå     | ‚úÖ     | ... |


GRUPO 2
| Alumno     | 02/10 | 03/10 | 04/10 | 05/10 | ... |
| ---------- | ----- | ----- | ----- | ----- | --- |
| Juan P√©rez | ‚úÖ     | ‚ùå     | ‚úÖ     | ‚úÖ     | ... |
| Ana L√≥pez  | ‚úÖ     | ‚úÖ     | ‚ùå     | ‚úÖ     | ... |




PROPUESTA DE MODELO PARA ASISTENCIA:

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Asistencia extends Model
{
    protected $table = 'asistencia';

    // Desactivamos incremento autom√°tico porque no hay campo "id"
    public $incrementing = false;

    // Si usas clave primaria compuesta (grupoid, alumnoid, fecha), Eloquent no las maneja de forma nativa.
    // Puedes dejar la PK "sin definir" y trabajar con save/update/delete mediante query builder
    // o usar un paquete externo como "eloquent-composite-primary-key".
    protected $primaryKey = null;

    protected $fillable = [
        'grupoid',
        'alumnoid',
        'fecha',
    ];

    protected $casts = [
        'fecha' => 'date',
    ];

    // Relaciones
    public function grupo()
    {
        return $this->belongsTo(Grupo::class, 'grupoid');
    }

    public function alumno()
    {
        return $this->belongsTo(Alumno::class, 'alumnoid');
    }
}

COMO USARLO EN EL CONTROLADOR:
use App\Models\Asistencia;

public function registrar(Request $request)
{
    Asistencia::create([
        'grupoid' => $request->grupoid,
        'alumnoid' => $request->alumnoid,
        'fecha' => now()->toDateString(), // formato YYYY-MM-DD
    ]);

    return response()->json(['ok' => true]);
}




-Comunicaciones
    generaremos una nueva pesta√±a de comunicaciones desde donde podremos gestionar la comunicaci√≥n de nuestra herramienta
    con los usuarios potenciales(profesore, alumnos, clientes, usuarios)

    Dentro de comunicaciones haremos apartado
        -plantillas email
        -emails enviados-->filtros
        -programar env√≠o
        -env√≠o de email

            idplantilla
            nombre
            created

            Secciones:
                100%
                2 columns
                3 columns
                4 columns
            
                insert("ecb_emails_rows",array(
                "idrow"=>intval($maxid[0]["idrow"]+1),
                "idtyperow"=>intval($_REQUEST["idtyperow"]),
                "properties"=>json_encode($properties),
                "sort"=>intval($_REQUEST["position"]),
                "idemail"=>intval($_REQUEST["idemail"])


            Content:
                Header
                Image
                Title
                Paragraph
                Button
                Divider
                List
                Html
                Footer

                $resul=$db->insert("ecb_emails_blocks",array(
                        "idblock"=>intval($maxid[0]["idblock"]+1),
                        "idtypeblock"=>intval($_REQUEST["idtypeblock"]),
                        "idrow"=>intval($_REQUEST["idrow"]),
                        "col"=>intval($_REQUEST["col"]),
                        "properties"=>json_encode($properties),
                        "sort"=>intval($_REQUEST["position"]),
                        "idemail"=>intval($_REQUEST["idemail"]),
                    ));

            Concepto de col, que hace referencia en que col se inserta





    Plantillas de email:
        tendremos un listado donde podremos gestionar las plantillas de email 
            las plantillas de email nos basaremos en la herramienta emailbuilder. 

    Emails enviados->mostraremos el listado de emails que hemos enviado(y ver si se ha leido), podremos entrar en el detalle              
        para ver a que usuarios se ha enviado
    
    Programar env√≠o:
        Seleccionaremos una plantilla o un texto que enviaremos con la fecha programada(control de fechas, solo lo podremos enviar una vez)
        No dejaremos enviar m√°s de 15 veces un correo.







